<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blazor on Jim&#39;s 技術部落格</title>
    <link>https://twjimwang.github.io/tags/blazor/</link>
    <description>Recent content in Blazor on Jim&#39;s 技術部落格</description>
    <image>
      <url>https://twjimwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://twjimwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Oct 2022 19:43:24 +0800</lastBuildDate><atom:link href="https://twjimwang.github.io/tags/blazor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASP.NET Core Blazor 系列 - 027 內建 Razor 元件 (4) Virtualize</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-027-builtincomponet-04-virtualize/</link>
      <pubDate>Tue, 11 Oct 2022 19:43:24 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-027-builtincomponet-04-virtualize/</guid>
      <description>前言 今日介紹另一個特別的內建元件 Virtualize 元件虛擬化，這個效果很類似 Lazy load，只渲染使用者看得見的部分 基本使用 以下的程式碼一次性會產出5000個 div</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 026 內建 Razor 元件 (3) DynamicComponent</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-026-builtincomponet-03-dynamiccomponent/</link>
      <pubDate>Mon, 10 Oct 2022 21:15:27 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-026-builtincomponet-03-dynamiccomponent/</guid>
      <description>前言 DynamicComponent 顧名思義就是動態元件，允許開發者依照邏輯去動態的轉譯需要的元件，這篇文章會介紹該如何使用 基本使用 建立四個 Component One.razor 1 2 3 4 5 &amp;lt;h3&amp;gt;One&amp;lt;/h3&amp;gt; @code { } Two.razor 1 2 3</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 025 內建 Razor 元件 (2) CascadingValue</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-025-builtincomponet-02-cascadingvalue/</link>
      <pubDate>Sun, 09 Oct 2022 20:20:33 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-025-builtincomponet-02-cascadingvalue/</guid>
      <description>前言 今日介紹的內建元件是 CascadingValue 用途是從父元件傳遞參數到子元件，而無需使用傳統的參數 基本用法 父元件 1 2 3 4 5 6 7 8 @page &amp;#34;/parent&amp;#34; &amp;lt;CascadingValue Value=&amp;#34;@Content&amp;#34;&amp;gt; &amp;lt;Child&amp;gt;&amp;lt;/Child&amp;gt; &amp;lt;/CascadingValue&amp;gt; @code { string Content = &amp;#34;</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 024 內建 Razor 元件 (1)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-024-builtincomponet-01/</link>
      <pubDate>Sat, 08 Oct 2022 21:29:08 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-024-builtincomponet-01/</guid>
      <description>前言 我們介紹完了內建的九種輸入元件，今天來講講其他的內建元件，這邊預計會分成四天來說，有些內建元件可能會需要用到一篇文章的篇幅來做介紹，例如</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 023 UI Components Llibrary </title>
      <link>https://twjimwang.github.io/posts/programming/blazor-023-uicomponentlibrary/</link>
      <pubDate>Fri, 07 Oct 2022 22:00:07 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-023-uicomponentlibrary/</guid>
      <description>前言 今天來點輕鬆的內容，介紹一下我發現的一些 UI 元件 Telerik UI for Blazor 網站: https://www.telerik.com/blazor-ui Ant Design Blazor 基於 Ant Design 設計的 Blazor 組件庫，中文資源豐富 網站: https://antblazor.com/ BootstrapBlazor 基於 Bootstrap 所開發的組件庫，</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 022 內建輸入元件(2)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-022-custominputcomponet/</link>
      <pubDate>Thu, 06 Oct 2022 22:24:58 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-022-custominputcomponet/</guid>
      <description>前言 今天介紹剩下的四種輸入元件，還有如何透過 InputBase 量身定做符合自己需要的元件 InputRadio &amp;amp;&amp;amp; InputRadioGroup 單選輸入，可以從多個選項中選取單一個選項，經過轉譯後變成&amp;lt</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 021 內建輸入元件(1)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-021-builtininputcomponet/</link>
      <pubDate>Wed, 05 Oct 2022 22:13:41 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-021-builtininputcomponet/</guid>
      <description>前言 今天介紹輸入類型的表單，熟悉各種內建的元件可以讓在做表單時不用自己造輪子，使用現成的元件，如果遇到既有的元件無法解決需求那我們再來自己製</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 020 表單驗證</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-020-formvalidation/</link>
      <pubDate>Tue, 04 Oct 2022 19:07:19 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-020-formvalidation/</guid>
      <description>前言 今天來介紹表單驗證該怎麼做，透過 Blazor 內建表單元件，來做到對欄位的驗證 內建的驗證屬性 在 C# 內的 System.ComponentModel.DataAnnotations 命名空間有微軟提供的驗證屬性，這邊介紹幾個比較</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 019 相依性注入</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-019-dependencyinjection/</link>
      <pubDate>Mon, 03 Oct 2022 20:36:27 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-019-dependencyinjection/</guid>
      <description>前言 相依性注入是一種可以存取在中央設定的服務的技術，註冊的服務可以直接在 razor 元件內使用，Blazor 跟 ASP.NET Core 上的 DI 稍微有些不同，如果還不清楚什麼</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 018 路由與導向(2) 導航 Navigation</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-018-navigation/</link>
      <pubDate>Sun, 02 Oct 2022 18:27:31 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-018-navigation/</guid>
      <description>前言 完成路由的設定後，下一步就是切換到不同路由的方法，今天介紹怎麼使用 NavigationManager 來做路由的切換 NavigationManager 這是用來提供查詢和瀏覽 Uri 的工具，介紹幾個比較重要的事</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 017 路由與導向(1) 路由 Routing</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-017-route/</link>
      <pubDate>Sat, 01 Oct 2022 20:38:18 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-017-route/</guid>
      <description>前言 網頁開發常常會有從這個頁面跳轉到另一個頁面的需求，我們在範例專案的左邊側邊欄按鈕就是一個導向的實作，從首頁導到我們製作的 Razor 元件，什麼樣的</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 016 身分驗證 Bearer Token</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-016-jwtbearertoken/</link>
      <pubDate>Fri, 30 Sep 2022 22:02:41 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-016-jwtbearertoken/</guid>
      <description>前言 今日會展示在 Blazor 中，介紹如何儲存 Token 和存放的幾種位置以及他們的優缺點，還有帶著 Token 發送API Token 怎麼儲存 拿到 Token 後，應該放哪裡呢 ? 在前端可以存放資</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 015 身分驗證 登入畫面</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-015-jwtloginpage/</link>
      <pubDate>Thu, 29 Sep 2022 19:50:57 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-015-jwtloginpage/</guid>
      <description>前言 上一篇我們在後端建立了 Token 發行與驗證的機制，今天我們回到主題在 Blaoz 怎麼取得 Token 登入畫面 首先我們建立一個登入的頁面，有帳號和密碼欄位以及一個送出</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 014 身分驗證 實作JWT</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-014-jwtimplement/</link>
      <pubDate>Wed, 28 Sep 2022 19:13:47 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-014-jwtimplement/</guid>
      <description>前言 上一章我們介紹了 JWT 的基本原理，接下來我們會建立一個 WebAPI 並透過他發行 JWT Token，然後將導入 Token 驗證的機制 建立 WebAssembly 專案 開啟 Visual Studio 點選建立新專案並點</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 013 身分驗證 JWT概述</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-013-jwtintroduce/</link>
      <pubDate>Tue, 27 Sep 2022 20:42:24 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-013-jwtintroduce/</guid>
      <description>前言 驗證與授權一直是網站一個很重要的部分，Blazor Server 的專案，和以往的 ASP.NET MVC 專案類似，在這邊比較特別的是 Blazor WebAssembly，因為他是一</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 012 WebAPI 呼叫</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-012-callwebapi/</link>
      <pubDate>Mon, 26 Sep 2022 21:42:34 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-012-callwebapi/</guid>
      <description>前言 WebAPI 的呼叫已經是網站開發者不可或缺的一項基本能力，如果使用 JS 可能用過 XMLHttpRequest 、 Ajax 、fetch 、axios &amp;hellip;&amp;hellip;等方式來</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 011 檔案處理</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-011-file/</link>
      <pubDate>Sun, 25 Sep 2022 20:42:52 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-011-file/</guid>
      <description>前言 在網頁的開發中，上傳檔案是一個非常常見的需求，本章節會介紹在開發 Blazor 時，該怎麼來實現檔案上傳的功能，Server 和 WebAssembly 雖然細節上有些差異但大</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 010 元件(Componet) CSS</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-010-componet-css/</link>
      <pubDate>Sat, 24 Sep 2022 22:08:20 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-010-componet-css/</guid>
      <description>前言 在上一篇說明 JS 互通性時，有提到在 Blazor 上撰寫 JS 的部分，現在來介紹在 Blazor 中 CSS 的部分 CSS Isolation (CSS 隔離) 大家都知道 CSS 的套用是全域的，只要符合 CSS Selector 的所選的項</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 009 JavaScript 互通性 (JS interop)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-009-jsinterop/</link>
      <pubDate>Fri, 23 Sep 2022 20:07:01 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-009-jsinterop/</guid>
      <description>前言 Blazor 應用程式有提供從 JavaSript 呼叫 .NET Method 的方法，當然反過來也可以從 .NET Method 叫用 JavaScript Function，打通兩個語言之間的邊界，讓互動性更上一層樓! 概觀 在 Blazor 中</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 008 元件(Componet) 事件處理</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-008-componet-eventhandling/</link>
      <pubDate>Thu, 22 Sep 2022 22:27:28 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-008-componet-eventhandling/</guid>
      <description>前言 這個章節介紹 Blazor 的事件處理，事件的引數、使用方式以及範例 事件介紹 這是一個非常簡單的按鈕事件範例，點下按鈕後會在Console內輸出 Hello World 1 2</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 007 元件(Componet) 生命週期</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-007-componet-lifecycle/</link>
      <pubDate>Wed, 21 Sep 2022 22:55:49 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-007-componet-lifecycle/</guid>
      <description>前言 在前幾個章節中，我們實作了一些元件，但是元件我們不知道元件是什麼時候建立的也還不知道什麼時候會消失，今天就來說說元件從建立到銷毀的流程與</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 006 元件(Componet) 參數</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-006-componet-parameter/</link>
      <pubDate>Tue, 20 Sep 2022 09:17:00 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-006-componet-parameter/</guid>
      <description>前言 在第四章元件的介紹中，提到元件可重複使用，但是如果元件的內容都固定了要怎麼重複使用呢? 寫程式的大家都知道，看到重複的邏輯時應當要抽離成方</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 005 元件(Componet) 資料繫結</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-005-componet-databinding/</link>
      <pubDate>Mon, 19 Sep 2022 00:51:05 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-005-componet-databinding/</guid>
      <description>前言 上一篇我們做了一個簡單的表單元件，其中有用到 bind-value 來將 input 內的資料轉送到 C# 內，在這一篇我會來介紹 Razor 元件當中資料繫結的細節(繞口令) Data Binding 我看過有</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 004 元件(Componet) 概觀</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-004-componet-overview/</link>
      <pubDate>Sun, 18 Sep 2022 23:21:05 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-004-componet-overview/</guid>
      <description>前言 元件(Componet) 是 Blazor 應用程式的基礎，是 UI 的元素，例如頁面、按鈕或者是表單，正式名稱為 Razor 元件(Razor component) Razor 是一種結合了 HTML 標記語言</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 003 專案架構(Blazor WebAssembly)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-003-blazorwebassembly-projectstructure/</link>
      <pubDate>Sun, 18 Sep 2022 23:17:58 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-003-blazorwebassembly-projectstructure/</guid>
      <description>前言 在這一章會介紹 Blazor WebAssembly，分別是獨立(Standalone) Blazor WebAssembly和裝載(Hosted) Blazor WebAssembly 兩種範本專案</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 002 專案架構(Blazor Server)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-002-blazorserver-projectstructure/</link>
      <pubDate>Sun, 18 Sep 2022 23:15:27 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-002-blazorserver-projectstructure/</guid>
      <description>前言 在接下來的章節將會對兩種 Bloazr 的專案範本做解說，分別是 Blazor Server 以及 Blazor WebAssembly，其中 WebAssembly 會介紹獨立(Standalone) Blazor WebAssembly 和裝載(</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 001 初次見面</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-001-overview/</link>
      <pubDate>Sun, 18 Sep 2022 11:36:34 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-001-overview/</guid>
      <description>前言 這個系列是記錄我學習 Blazor 的筆記，如果有任何錯誤的地方歡迎提出指教 Blazor 是微軟打造的新一代全端解決方案，其名稱來自 Browser + Razor 可以讓網頁程式開發拋開 JavaScript</description>
    </item>
    
  </channel>
</rss>
