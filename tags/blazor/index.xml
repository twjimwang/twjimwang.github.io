<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blazor on Jim&#39;s 技術部落格</title>
    <link>https://twjimwang.github.io/tags/blazor/</link>
    <description>Recent content in Blazor on Jim&#39;s 技術部落格</description>
    <image>
      <url>https://twjimwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://twjimwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Sep 2022 19:50:57 +0800</lastBuildDate><atom:link href="https://twjimwang.github.io/tags/blazor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASP.NET Core Blazor 系列 - 015 身分驗證 登入畫面</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-015-jwtloginpage/</link>
      <pubDate>Thu, 29 Sep 2022 19:50:57 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-015-jwtloginpage/</guid>
      <description>前言 上一篇我們在後端建立了 Token 發行與驗證的機制，今天我們回到主題在 Blaoz 怎麼取得 Token 登入畫面 首先我們建立一個登入的頁面，有帳號和密碼欄位以及一個送出</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 014 身分驗證 實作JWT</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-014-jwtimplement/</link>
      <pubDate>Wed, 28 Sep 2022 19:13:47 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-014-jwtimplement/</guid>
      <description>前言 上一章我們介紹了 JWT 的基本原理，接下來我們會建立一個 WebAPI 並透過他發行 JWT Token，然後將導入 Token 驗證的機制 建立 WebAssembly 專案 開啟 Visual Studio 點選建立新專案並點</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 013 身分驗證 JWT概述</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-013-jwtintroduce/</link>
      <pubDate>Tue, 27 Sep 2022 20:42:24 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-013-jwtintroduce/</guid>
      <description>前言 驗證與授權一直是網站一個很重要的部分，Blazor Server 的專案，和以往的 ASP.NET MVC 專案類似，在這邊比較特別的是 Blazor WebAssembly，因為他是一</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 012 WebAPI 呼叫</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-012-callwebapi/</link>
      <pubDate>Mon, 26 Sep 2022 21:42:34 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-012-callwebapi/</guid>
      <description>前言 WebAPI 的呼叫已經是網站開發者不可或缺的一項基本能力，如果使用 JS 可能用過 XMLHttpRequest 、 Ajax 、fetch 、axios &amp;hellip;&amp;hellip;等方式來</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 011 檔案處理</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-011-file/</link>
      <pubDate>Sun, 25 Sep 2022 20:42:52 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-011-file/</guid>
      <description>前言 在網頁的開發中，上傳檔案是一個非常常見的需求，本章節會介紹在開發 Blazor 時，該怎麼來實現檔案上傳的功能，Server 和 WebAssembly 雖然細節上有些差異但大</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 010 元件(Componet) CSS</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-010-componet-css/</link>
      <pubDate>Sat, 24 Sep 2022 22:08:20 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-010-componet-css/</guid>
      <description>前言 在上一篇說明 JS 互通性時，有提到在 Blazor 上撰寫 JS 的部分，現在來介紹在 Blazor 中 CSS 的部分 CSS Isolation (CSS 隔離) 大家都知道 CSS 的套用是全域的，只要符合 CSS Selector 的所選的項</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 009 JavaScript 互通性 (JS interop)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-009-jsinterop/</link>
      <pubDate>Fri, 23 Sep 2022 20:07:01 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-009-jsinterop/</guid>
      <description>前言 Blazor 應用程式有提供從 JavaSript 呼叫 .NET Method 的方法，當然反過來也可以從 .NET Method 叫用 JavaScript Function，打通兩個語言之間的邊界，讓互動性更上一層樓! 概觀 在 Blazor 中</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 008 元件(Componet) 事件處理</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-008-componet-eventhandling/</link>
      <pubDate>Thu, 22 Sep 2022 22:27:28 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-008-componet-eventhandling/</guid>
      <description>前言 這個章節介紹 Blazor 的事件處理，事件的引數、使用方式以及範例 事件介紹 這是一個非常簡單的按鈕事件範例，點下按鈕後會在Console內輸出 Hello World 1 2</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 007 元件(Componet) 生命週期</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-007-componet-lifecycle/</link>
      <pubDate>Wed, 21 Sep 2022 22:55:49 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-007-componet-lifecycle/</guid>
      <description>前言 在前幾個章節中，我們實作了一些元件，但是元件我們不知道元件是什麼時候建立的也還不知道什麼時候會消失，今天就來說說元件從建立到銷毀的流程與</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 006 元件(Componet) 參數</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-006-componet-parameter/</link>
      <pubDate>Tue, 20 Sep 2022 09:17:00 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-006-componet-parameter/</guid>
      <description>前言 在第四章元件的介紹中，提到元件可重複使用，但是如果元件的內容都固定了要怎麼重複使用呢? 寫程式的大家都知道，看到重複的邏輯時應當要抽離成方</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 005 元件(Componet) 資料繫結</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-005-componet-databinding/</link>
      <pubDate>Mon, 19 Sep 2022 00:51:05 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-005-componet-databinding/</guid>
      <description>前言 上一篇我們做了一個簡單的表單元件，其中有用到 bind-value 來將 input 內的資料轉送到 C# 內，在這一篇我會來介紹 Razor 元件當中資料繫結的細節(繞口令) Data Binding 我看過有</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 004 元件(Componet) 概觀</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-004-componet-overview/</link>
      <pubDate>Sun, 18 Sep 2022 23:21:05 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-004-componet-overview/</guid>
      <description>前言 元件(Componet) 是 Blazor 應用程式的基礎，是 UI 的元素，例如頁面、按鈕或者是表單，正式名稱為 Razor 元件(Razor component) Razor 是一種結合了 HTML 標記語言</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 003 專案架構(Blazor WebAssembly)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-003-blazorwebassembly-projectstructure/</link>
      <pubDate>Sun, 18 Sep 2022 23:17:58 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-003-blazorwebassembly-projectstructure/</guid>
      <description>前言 在這一章會介紹 Blazor WebAssembly，分別是獨立(Standalone) Blazor WebAssembly和裝載(Hosted) Blazor WebAssembly 兩種範本專案</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 002 專案架構(Blazor Server)</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-002-blazorserver-projectstructure/</link>
      <pubDate>Sun, 18 Sep 2022 23:15:27 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-002-blazorserver-projectstructure/</guid>
      <description>前言 在接下來的章節將會對兩種 Bloazr 的專案範本做解說，分別是 Blazor Server 以及 Blazor WebAssembly，其中 WebAssembly 會介紹獨立(Standalone) Blazor WebAssembly 和裝載(</description>
    </item>
    
    <item>
      <title>ASP.NET Core Blazor 系列 - 001 初次見面</title>
      <link>https://twjimwang.github.io/posts/programming/blazor-001-overview/</link>
      <pubDate>Sun, 18 Sep 2022 11:36:34 +0800</pubDate>
      
      <guid>https://twjimwang.github.io/posts/programming/blazor-001-overview/</guid>
      <description>前言 這個系列是記錄我學習 Blazor 的筆記，如果有任何錯誤的地方歡迎提出指教 Blazor 是微軟打造的新一代全端解決方案，其名稱來自 Browser + Razor 可以讓網頁程式開發拋開 JavaScript</description>
    </item>
    
  </channel>
</rss>
